<AlertDialog 
          open={editingClient !== null} 
          onOpenChange={() => setEditingClient(null)}
        >
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Edit Client</AlertDialogTitle>
              <AlertDialogDescription>
                Update client information
              </AlertDialogDescription>
            </AlertDialogHeader>
            {editingClient && (
              <div className="space-y-4">
                <Input
                  placeholder="First Name"
                  defaultValue={editingClient.firstName}
                  onChange={(e) => {
                    setEditingClient({
                      ...editingClient,
                      firstName: e.target.value
                    });
                  }}
                />
                <Input
                  placeholder="Last Name"
                  defaultValue={editingClient.lastName}
                  onChange={(e) => {
                    setEditingClient({
                      ...editingClient,
                      lastName: e.target.value
                    });
                  }}
                />
                <Input
                  placeholder="Email"
                  defaultValue={editingClient.email}
                  onChange={(e) => {
                    setEditingClient({
                      ...editingClient,
                      email: e.target.value
                    });
                  }}
                />
                <Input
                  placeholder="Phone"
                  defaultValue={editingClient.phone}
                  onChange={(e) => {
                    setEditingClient({
                      ...editingClient,
                      phone: e.target.value
                    });
                  }}
                />
                <Input
                  placeholder="Address"
                  defaultValue={editingClient.address}
                  onChange={(e) => {
                    setEditingClient({
                      ...editingClient,
                      address: e.target.value
                    });
                  }}
                />
              </div>
            )}
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction
                onClick={async () => {
                  if (editingClient) {
                    try {
                      const response = await fetch(`/api/clients/${editingClient.id}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(editingClient),
                      });

                      if (!response.ok) {
                        throw new Error('Failed to update client');
                      }

                      await refetchClients();
                      setEditingClient(null);

                      toast({
                        title: "Success",
                        description: "Client updated successfully",
                      });
                    } catch (error) {
                      toast({
                        title: "Error",
                        description: error instanceof Error ? error.message : "Failed to update client",
                        variant: "destructive",
                      });
                    }
                  }
                }}
              >
                Save Changes
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </>
    );
  };

  const filterClients = (clients: Client[]) => {
    return clients.filter(client => 
      client.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.phone?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.address?.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  const getLabelColor = (label: string, index: number) => {
    const allColors = [
      'bg-blue-100 text-blue-800 border border-blue-200',
      'bg-red-100 text-red-800 border border-red-200',
      'bg-green-100 text-green-800 border border-green-200',
      'bg-yellow-100 text-yellow-800 border border-yellow-200',
      'bg-purple-100 text-purple-800 border border-purple-200',
      'bg-pink-100 text-pink-800 border border-pink-200',
      'bg-orange-100 text-orange-800 border border-orange-200',
      'bg-indigo-100 text-indigo-800 border border-indigo-200'
    ];
    return allColors[index % allColors.length];
  };

  const prepareLabels = (labels: string[]): string[] => {
    return labels;
  };
    return clients.filter(client => 
      client.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.phone?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      client.address?.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  return (
    <main className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Client Management</h2>
        {user?.role === "agent" && (
          <Button onClick={() => navigate("/clients/new")}>Add Client</Button>
        )}
      </div>

      <Input
        type="text"
        placeholder="Search clients..."
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
        className="w-full md:w-96 mb-4"
      />
      <Search className="absolute right-3 top-2.5 h-5 w-5 text-muted-foreground" />


      <Card>
        <Tabs defaultValue="sellers" className="p-6">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="sellers">Sellers</TabsTrigger>
            <TabsTrigger value="buyers">Buyers</TabsTrigger>
          </TabsList>
          <TabsContent value="sellers">
            <ClientTable clients={sellers} />
          </TabsContent>
          <TabsContent value="buyers">
            <ClientTable clients={buyers} />
          </TabsContent>
        </Tabs>
      </Card>
    </main>
  );
}